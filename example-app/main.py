import json
from datetime import datetime
from pathlib import Path


from cvinatordatamanager.DataServer import DataServer
from cvinatorprocessingtools.OffersSummarizer import OffersSummarizer
from  cvinatorprocessingtools.SummariesEmbedder import SummariesEmbedder
from  cvinatorprocessingtools.SummariesComparator import SummariesComparator
from  cvinatorprocessingtools.SimilarityVisualizer import SimilarityVisualizer

def insert_jji_offers(data_server, json_path, top_n=None, offset=0):
    with open(json_path, "r", encoding="utf8") as file:
        offers = json.load(file)

    if top_n is not None:
        offers = offers[offset:offset+top_n]
    else:
        offers = offers[offset:]

    for offer in offers:
        processed_offer = {
            'offer': offer,
            'source': 'https://justjoin.it/',
            'timestamp': int(datetime.now().timestamp()),
        }
        data_server.insert_offer(processed_offer)

def load_jji_data(data_server):
    data_server = DataServer('data', create_if_not_exists=True, recreate_if_outdated=True)

    insert_jji_offers(data_server, 'job_offers.json')

    offers_ids = data_server.get_offers_ids()

    prompt_path = "prompts/summarization/prompt_jji.txt"
    with open(prompt_path, "r") as file:
        prompt = file.read()

    offers_summarizer = OffersSummarizer(data_server)

    for id in offers_ids:
        summary = offers_summarizer.summarize_offer(id, prompt, 'llama3.2', 'ollama')
        if summary is None: # if summarization failed (e.g. due to incorrect JSON generated by the llm) try again (but only once)
            summary = offers_summarizer.summarize_offer(id, prompt, 'llama3.2', 'ollama')
        if summary is not None:
            data_server.insert_summary(summary)

    fields_to_embed = ['job_title', 'job_description', 'requirements']
    summaries_embedder = SummariesEmbedder(data_server, 'paraphrase-albert-small-v2', fields_to_embed)
    summaries_ids = data_server.get_summaries_ids()

    for id in summaries_ids:
        embeddings, embeddings_info = summaries_embedder.embed_summary(id)
        data_server.insert_embedding(embeddings, embeddings_info)

def similarities_usage_example():

    # create data server to access offers and precessed data
    data_server = DataServer('data', create_if_not_exists=False)

    # define how comparation should be done
    # specify which features of the offer (summary in fact) should be compared and how
    comparation_scheme = {
        'job_title': {
            'method': 'embedding',  # compare embeddings of this field with SBERT built-in simmilarity measure
            'weight': 1.0           # importance of the field in the final similarity
        },
        'job_description': {
            'method': 'embedding',
            'weight': 2.0
        },
        'requirements': {
            'method': 'embedding',
            'weight': 1.0
        },
        'required_skills': {
            'method': 'list',   # compare lists of strings by the number of common elements (how many of the required skills are the same)
            'weight': 2.0
        }
    }

    # create comparator object
    summaries_comparator = SummariesComparator(data_server, comparation_scheme)

    # get all embeddings ids
    embeddings_ids = data_server.get_embeddings_ids()

    # get the most similar offers to the first one
    most_similar = summaries_comparator.get_most_similar_summaries(embeddings_ids[0], embeddings_ids)

    # print results
    print(most_similar)

    # get 3 most similar offers
    most_similar_emb_ids = list(most_similar.keys())[:3]
    most_similar_offers = [data_server.get_offer_by_id(emb_id) for emb_id in most_similar_emb_ids]

    # print them
    print(most_similar_offers)

    # close the data server
    data_server.close()

def main():
    similarities_usage_example()

    

main()